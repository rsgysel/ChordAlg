/*
 *  potential_maxcliques
 *
 *  Checks that the potential maxcliques generated by the
 *  connected components of a graph are equal in number to
 *  to the potential maxcliques generated by the atom
 *  subgraphs
 */

#include <cassert>
#include <string>

#include "ChordAlgSrc/atoms.h"
#include "ChordAlgSrc/graph.h"
#include "ChordAlgSrc/potential_maxcliques.h"
#include "ChordAlgSrc/separator.h"

using namespace chordalg;

int main(int argc, char** argv) {
    std::string usage = std::string(argv[0]) + " <filename>";
    if (argc != 2) {
        std::cerr << usage << '\n';
        exit(EXIT_FAILURE);
    }
    Graph* G = Graph::New(argv[1]);
    SeparatorBlocks S(G);
    S.Separate(Vertices());
    size_t cc_pmc_ct = 0;
    std::cout << "There are " << S.size() << " connected component(s).\n";
    std::cout << "Computing potential maxcliques of connected components...";
    for (Block B : S) {
        InducedSubgraph* H = InducedSubgraph::New(G, B.C());
        PMCTrie* P = PotentialMaxcliques::Generate(*H);
        cc_pmc_ct += P->size();
        delete P;
        delete H;
    }
    std::cout << "done.\nComputing atoms...";
    Atoms* A = Atoms::New(G);
    std::cout << "done.\nThere are " << A->size() << " atom subgraph(s).\n";
    std::cout << "Computing potential maxcliques of atom subgraphs...";
    size_t atoms_pmc_ct = 0;
    for (auto a : *A) {
        PMCTrie* P = PotentialMaxcliques::Generate(*a);
        atoms_pmc_ct += P->size();
        delete P;
    }
    std::cout << "done.\n" << std::endl;
    assert(cc_pmc_ct == atoms_pmc_ct);
    delete A;
    delete G;
    std::cout << "Check successfully completed: " << cc_pmc_ct
              << " potential maxcliques found.\n";
    return(EXIT_SUCCESS);
}
